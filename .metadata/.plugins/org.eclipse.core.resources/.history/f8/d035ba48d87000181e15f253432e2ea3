package kugui.owd.privateMessenger;

import java.io.*;
import java.net.*;

import javafx.application.Platform;
import kugui.owd.privateMessenger.stage.ReceivedMessageStage;
import kugui.owd.privateMessenger.stage.ReceivedMessageStageController;

public class RxThread extends Thread {

	public void run() {

		int port = 80; // test用。
		int timeout = 1000;
		ServerSocket sSocket = null;

		try {

			sSocket = new ServerSocket(port);
			sSocket.setSoTimeout(timeout);

			System.out.println(String.format("start listening port　%d", port));

			while (true) {

				try {
					int length = 0;
					StringBuffer sBuffer = new StringBuffer();
					DataInputStream dis = new DataInputStream(sSocket.accept().getInputStream());

					System.out.println(
							String.format("IP %s port %d : socket accept", sSocket.getInetAddress().toString(), port));

					while (length >= 0) {

						byte[] buffer = new byte[1024];
						length = dis.read(buffer);
						sBuffer.append(new String(buffer));
						
					}

					dis.close();

					/* 受信メッセージウィンドウの生成処理 */
					Booker booker = new Booker(new ReceivedMessageStage());
					ReceivedMessageStageController rmsc = (ReceivedMessageStageController) booker.getController();
					rmsc.setSentFrom(sSocket.getInetAddress().getHostAddress().toString());
					rmsc.setMessageWindow(sBuffer.toString());
					Platform.runLater(booker);
					
				} catch (SocketTimeoutException se) {

					if (interrupted() == true) {

						break;

					} else {

						/* no operation */

					}
				}
			}

		} catch (IOException ioE) {

			ioE.printStackTrace();

		} finally {
			if (sSocket != null) {
				try {
					sSocket.close();
				} catch (IOException ioe) {

					ioe.printStackTrace();

				}
			} else {
				/* no operation */
			}

		}

		System.out.println("finished");

		return;
	}

}